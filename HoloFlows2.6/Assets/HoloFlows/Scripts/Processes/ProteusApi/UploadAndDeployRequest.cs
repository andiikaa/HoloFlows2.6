/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// UploadAndDeployRequest
    /// </summary>
    [DataContract]
    public partial class UploadAndDeployRequest :  IEquatable<UploadAndDeployRequest>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UploadAndDeployRequest" /> class.
        /// </summary>
        /// <param name="Processdocument">Processdocument.</param>
        /// <param name="OverrideExisting">OverrideExisting.</param>
        public UploadAndDeployRequest(string Processdocument = default(string), bool? OverrideExisting = default(bool?))
        {
            this.Processdocument = Processdocument;
            this.OverrideExisting = OverrideExisting;
        }
        
        /// <summary>
        /// Gets or Sets Processdocument
        /// </summary>
        [DataMember(Name="processdocument", EmitDefaultValue=false)]
        public string Processdocument { get; set; }

        /// <summary>
        /// Gets or Sets OverrideExisting
        /// </summary>
        [DataMember(Name="overrideExisting", EmitDefaultValue=false)]
        public bool? OverrideExisting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UploadAndDeployRequest {\n");
            sb.Append("  Processdocument: ").Append(Processdocument).Append("\n");
            sb.Append("  OverrideExisting: ").Append(OverrideExisting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UploadAndDeployRequest);
        }

        /// <summary>
        /// Returns true if UploadAndDeployRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of UploadAndDeployRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UploadAndDeployRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Processdocument == input.Processdocument ||
                    (this.Processdocument != null &&
                    this.Processdocument.Equals(input.Processdocument))
                ) && 
                (
                    this.OverrideExisting == input.OverrideExisting ||
                    (this.OverrideExisting != null &&
                    this.OverrideExisting.Equals(input.OverrideExisting))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Processdocument != null)
                    hashCode = hashCode * 59 + this.Processdocument.GetHashCode();
                if (this.OverrideExisting != null)
                    hashCode = hashCode * 59 + this.OverrideExisting.GetHashCode();
                return hashCode;
            }
        }
    }

}
