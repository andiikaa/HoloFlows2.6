/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONPort
    /// </summary>
    [DataContract]
    [KnownType(typeof(IJSONDataPort))]
    [KnownType(typeof(IJSONEscalationPort))]
    public partial class IJSONPort :  IEquatable<IJSONPort>
    {
        /// <summary>
        /// Defines PortType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PortTypeEnum
        {
            
            /// <summary>
            /// Enum StartDataPort for value: StartDataPort
            /// </summary>
            [EnumMember(Value = "StartDataPort")]
            StartDataPort = 1,
            
            /// <summary>
            /// Enum EndDataPort for value: EndDataPort
            /// </summary>
            [EnumMember(Value = "EndDataPort")]
            EndDataPort = 2,
            
            /// <summary>
            /// Enum StartControlPort for value: StartControlPort
            /// </summary>
            [EnumMember(Value = "StartControlPort")]
            StartControlPort = 3,
            
            /// <summary>
            /// Enum EndControlPort for value: EndControlPort
            /// </summary>
            [EnumMember(Value = "EndControlPort")]
            EndControlPort = 4,
            
            /// <summary>
            /// Enum EscalationPort for value: EscalationPort
            /// </summary>
            [EnumMember(Value = "EscalationPort")]
            EscalationPort = 5
        }

        /// <summary>
        /// Gets or Sets PortType
        /// </summary>
        [DataMember(Name="portType", EmitDefaultValue=false)]
        public PortTypeEnum? PortType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONPort" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="Type">Type.</param>
        /// <param name="OutTransitions">OutTransitions.</param>
        /// <param name="Description">Description.</param>
        /// <param name="Optional">Optional.</param>
        /// <param name="InTransitions">InTransitions.</param>
        /// <param name="PortType">PortType.</param>
        public IJSONPort(string Name = default(string), string Id = default(string), string Type = default(string), List<IJSONTransition> OutTransitions = default(List<IJSONTransition>), string Description = default(string), bool? Optional = default(bool?), IJSONTransition InTransitions = default(IJSONTransition), PortTypeEnum? PortType = default(PortTypeEnum?))
        {
            this.Name = Name;
            this.Id = Id;
            this.Type = Type;
            this.OutTransitions = OutTransitions;
            this.Description = Description;
            this.Optional = Optional;
            this.InTransitions = InTransitions;
            this.PortType = PortType;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets OutTransitions
        /// </summary>
        [DataMember(Name="outTransitions", EmitDefaultValue=false)]
        public List<IJSONTransition> OutTransitions { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Optional
        /// </summary>
        [DataMember(Name="optional", EmitDefaultValue=false)]
        public bool? Optional { get; set; }

        /// <summary>
        /// Gets or Sets InTransitions
        /// </summary>
        [DataMember(Name="inTransitions", EmitDefaultValue=false)]
        public IJSONTransition InTransitions { get; set; }


        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONPort {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OutTransitions: ").Append(OutTransitions).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Optional: ").Append(Optional).Append("\n");
            sb.Append("  InTransitions: ").Append(InTransitions).Append("\n");
            sb.Append("  PortType: ").Append(PortType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONPort);
        }

        /// <summary>
        /// Returns true if IJSONPort instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONPort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONPort input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.OutTransitions == input.OutTransitions ||
                    this.OutTransitions != null &&
                    this.OutTransitions.SequenceEqual(input.OutTransitions)
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Optional == input.Optional ||
                    (this.Optional != null &&
                    this.Optional.Equals(input.Optional))
                ) && 
                (
                    this.InTransitions == input.InTransitions ||
                    (this.InTransitions != null &&
                    this.InTransitions.Equals(input.InTransitions))
                ) && 
                (
                    this.PortType == input.PortType ||
                    (this.PortType != null &&
                    this.PortType.Equals(input.PortType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.OutTransitions != null)
                    hashCode = hashCode * 59 + this.OutTransitions.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Optional != null)
                    hashCode = hashCode * 59 + this.Optional.GetHashCode();
                if (this.InTransitions != null)
                    hashCode = hashCode * 59 + this.InTransitions.GetHashCode();
                if (this.PortType != null)
                    hashCode = hashCode * 59 + this.PortType.GetHashCode();
                return hashCode;
            }
        }

    }

}
