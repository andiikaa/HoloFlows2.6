/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONDoubleTypeInstance
    /// </summary>
    [DataContract]
    public partial class IJSONDoubleTypeInstance : IJSONTypeInstance,  IEquatable<IJSONDoubleTypeInstance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONDoubleTypeInstance" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="ValueAsObject">ValueAsObject.</param>
        //public IJSONDoubleTypeInstance(double? Value = default(double?), double? ValueAsObject = default(double?), string Name = default(string), IJSONType DataType = default(IJSONType), string ValueString = default(string), double? ValueAsObject = default(double?), string TypeClass = default(string), DataTypeInstanceTypeEnum? DataTypeInstanceType = default(DataTypeInstanceTypeEnum?), string ValueStringComplete = default(string), string DataTypeID = default(string), string InstanceID = default(string)) : base(Name, DataType, ValueString, TypeClass, DataTypeInstanceType, ValueStringComplete, DataTypeID, InstanceID)
        //{
        //    this.Value = Value;
        //    this.ValueAsObject = ValueAsObject;
        //}
        
        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public double? Value { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsObject
        /// </summary>
        [DataMember(Name="valueAsObject", EmitDefaultValue=false)]
        new public double? ValueAsObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONDoubleTypeInstance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  ValueAsObject: ").Append(ValueAsObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONDoubleTypeInstance);
        }

        /// <summary>
        /// Returns true if IJSONDoubleTypeInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONDoubleTypeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONDoubleTypeInstance input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && base.Equals(input) && 
                (
                    this.ValueAsObject == input.ValueAsObject ||
                    (this.ValueAsObject != null &&
                    this.ValueAsObject.Equals(input.ValueAsObject))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.ValueAsObject != null)
                    hashCode = hashCode * 59 + this.ValueAsObject.GetHashCode();
                return hashCode;
            }
        }

    }

}
