/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IProcessInstanceInfo
    /// </summary>
    [DataContract]
    public partial class IProcessInstanceInfo : IEquatable<IProcessInstanceInfo>
    {
        /// <summary>
        /// Defines State
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StateEnum
        {

            /// <summary>
            /// Enum ACTIVE for value: ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVE = 1,

            /// <summary>
            /// Enum INACTIVE for value: INACTIVE
            /// </summary>
            [EnumMember(Value = "INACTIVE")]
            INACTIVE = 2,

            /// <summary>
            /// Enum EXECUTING for value: EXECUTING
            /// </summary>
            [EnumMember(Value = "EXECUTING")]
            EXECUTING = 3,

            /// <summary>
            /// Enum EXECUTED for value: EXECUTED
            /// </summary>
            [EnumMember(Value = "EXECUTED")]
            EXECUTED = 4,

            /// <summary>
            /// Enum PAUSED for value: PAUSED
            /// </summary>
            [EnumMember(Value = "PAUSED")]
            PAUSED = 5,

            /// <summary>
            /// Enum STOPPED for value: STOPPED
            /// </summary>
            [EnumMember(Value = "STOPPED")]
            STOPPED = 6,

            /// <summary>
            /// Enum FAILED for value: FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILED = 7,

            /// <summary>
            /// Enum KILLED for value: KILLED
            /// </summary>
            [EnumMember(Value = "KILLED")]
            KILLED = 8,

            /// <summary>
            /// Enum WAITING for value: WAITING
            /// </summary>
            [EnumMember(Value = "WAITING")]
            WAITING = 9,

            /// <summary>
            /// Enum UNDEPLOYED for value: UNDEPLOYED
            /// </summary>
            [EnumMember(Value = "UNDEPLOYED")]
            UNDEPLOYED = 10,

            /// <summary>
            /// Enum ESCALATED for value: ESCALATED
            /// </summary>
            [EnumMember(Value = "ESCALATED")]
            ESCALATED = 11,

            /// <summary>
            /// Enum DEACTIVATED for value: DEACTIVATED
            /// </summary>
            [EnumMember(Value = "DEACTIVATED")]
            DEACTIVATED = 12
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IProcessInstanceInfo" /> class.
        /// </summary>
        /// <param name="State">State.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="InstanceNumber">InstanceNumber.</param>
        /// <param name="ProcessDescription">ProcessDescription.</param>
        /// <param name="ProcessName">ProcessName.</param>
        /// <param name="ProcessType">ProcessType.</param>
        /// <param name="ProcessId">ProcessId.</param>
        public IProcessInstanceInfo(StateEnum? State = default(StateEnum?), string ProcessInstanceId = default(string), int? InstanceNumber = default(int?), string ProcessDescription = default(string), string ProcessName = default(string), string ProcessType = default(string), string ProcessId = default(string))
        {
            this.State = State;
            this.ProcessInstanceId = ProcessInstanceId;
            this.InstanceNumber = InstanceNumber;
            this.ProcessDescription = ProcessDescription;
            this.ProcessName = ProcessName;
            this.ProcessType = ProcessType;
            this.ProcessId = ProcessId;
        }


        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets InstanceNumber
        /// </summary>
        [DataMember(Name = "instanceNumber", EmitDefaultValue = false)]
        public int? InstanceNumber { get; set; }

        /// <summary>
        /// Gets or Sets ProcessDescription
        /// </summary>
        [DataMember(Name = "processDescription", EmitDefaultValue = false)]
        public string ProcessDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name = "processName", EmitDefaultValue = false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessType
        /// </summary>
        [DataMember(Name = "processType", EmitDefaultValue = false)]
        public string ProcessType { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public string ProcessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IProcessInstanceInfo {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  InstanceNumber: ").Append(InstanceNumber).Append("\n");
            sb.Append("  ProcessDescription: ").Append(ProcessDescription).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  ProcessType: ").Append(ProcessType).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IProcessInstanceInfo);
        }

        /// <summary>
        /// Returns true if IProcessInstanceInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IProcessInstanceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IProcessInstanceInfo input)
        {
            if (input == null)
                return false;

            return
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) &&
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) &&
                (
                    this.InstanceNumber == input.InstanceNumber ||
                    (this.InstanceNumber != null &&
                    this.InstanceNumber.Equals(input.InstanceNumber))
                ) &&
                (
                    this.ProcessDescription == input.ProcessDescription ||
                    (this.ProcessDescription != null &&
                    this.ProcessDescription.Equals(input.ProcessDescription))
                ) &&
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) &&
                (
                    this.ProcessType == input.ProcessType ||
                    (this.ProcessType != null &&
                    this.ProcessType.Equals(input.ProcessType))
                ) &&
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.InstanceNumber != null)
                    hashCode = hashCode * 59 + this.InstanceNumber.GetHashCode();
                if (this.ProcessDescription != null)
                    hashCode = hashCode * 59 + this.ProcessDescription.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.ProcessType != null)
                    hashCode = hashCode * 59 + this.ProcessType.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                return hashCode;
            }
        }

    }

}
