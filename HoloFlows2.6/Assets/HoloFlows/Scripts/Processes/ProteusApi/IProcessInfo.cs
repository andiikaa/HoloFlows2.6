/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IProcessInfo
    /// </summary>
    [DataContract]
    public partial class IProcessInfo :  IEquatable<IProcessInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IProcessInfo" /> class.
        /// </summary>
        /// <param name="ProcessDescription">ProcessDescription.</param>
        /// <param name="ProcessName">ProcessName.</param>
        /// <param name="ProcessType">ProcessType.</param>
        /// <param name="ProcessId">ProcessId.</param>
        public IProcessInfo(string ProcessDescription = default(string), string ProcessName = default(string), string ProcessType = default(string), string ProcessId = default(string))
        {
            this.ProcessDescription = ProcessDescription;
            this.ProcessName = ProcessName;
            this.ProcessType = ProcessType;
            this.ProcessId = ProcessId;
        }
        
        /// <summary>
        /// Gets or Sets ProcessDescription
        /// </summary>
        [DataMember(Name="processDescription", EmitDefaultValue=false)]
        public string ProcessDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name="processName", EmitDefaultValue=false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessType
        /// </summary>
        [DataMember(Name="processType", EmitDefaultValue=false)]
        public string ProcessType { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="processId", EmitDefaultValue=false)]
        public string ProcessId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IProcessInfo {\n");
            sb.Append("  ProcessDescription: ").Append(ProcessDescription).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  ProcessType: ").Append(ProcessType).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IProcessInfo);
        }

        /// <summary>
        /// Returns true if IProcessInfo instances are equal
        /// </summary>
        /// <param name="input">Instance of IProcessInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IProcessInfo input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ProcessDescription == input.ProcessDescription ||
                    (this.ProcessDescription != null &&
                    this.ProcessDescription.Equals(input.ProcessDescription))
                ) && 
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) && 
                (
                    this.ProcessType == input.ProcessType ||
                    (this.ProcessType != null &&
                    this.ProcessType.Equals(input.ProcessType))
                ) && 
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessDescription != null)
                    hashCode = hashCode * 59 + this.ProcessDescription.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.ProcessType != null)
                    hashCode = hashCode * 59 + this.ProcessType.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                return hashCode;
            }
        }

    }

}
