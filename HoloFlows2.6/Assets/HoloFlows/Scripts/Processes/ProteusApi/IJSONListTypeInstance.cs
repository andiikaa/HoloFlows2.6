/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONListTypeInstance
    /// </summary>
    [DataContract]
    public partial class IJSONListTypeInstance : IJSONTypeInstance,  IEquatable<IJSONListTypeInstance>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONListTypeInstance" /> class.
        /// </summary>
        /// <param name="CollectionType">CollectionType.</param>
        /// <param name="DataType">DataType.</param>
        /// <param name="ValueAsObject">ValueAsObject.</param>
        /// <param name="SubTypes">SubTypes.</param>
        //public IJSONListTypeInstance(IJSONType CollectionType = default(IJSONType), IJSONListType DataType = default(IJSONListType), List<IJSONTypeInstance> ValueAsObject = default(List<IJSONTypeInstance>), List<IJSONTypeInstance> SubTypes = default(List<IJSONTypeInstance>), string Name = default(string), IJSONListType DataType = default(IJSONListType), string ValueString = default(string), List<IJSONTypeInstance> ValueAsObject = default(List<IJSONTypeInstance>), string TypeClass = default(string), DataTypeInstanceTypeEnum? DataTypeInstanceType = default(DataTypeInstanceTypeEnum?), string ValueStringComplete = default(string), string DataTypeID = default(string), string InstanceID = default(string)) : base(Name, ValueString, TypeClass, DataTypeInstanceType, ValueStringComplete, DataTypeID, InstanceID)
        //{
        //    this.CollectionType = CollectionType;
        //    this.DataType = DataType;
        //    this.ValueAsObject = ValueAsObject;
        //    this.SubTypes = SubTypes;
        //}
        
        /// <summary>
        /// Gets or Sets CollectionType
        /// </summary>
        [DataMember(Name="collectionType", EmitDefaultValue=false)]
        public IJSONType CollectionType { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="dataType", EmitDefaultValue=false)]
        new public IJSONListType DataType { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsObject
        /// </summary>
        [DataMember(Name="valueAsObject", EmitDefaultValue=false)]
        new public List<IJSONTypeInstance> ValueAsObject { get; set; }

        /// <summary>
        /// Gets or Sets SubTypes
        /// </summary>
        [DataMember(Name="subTypes", EmitDefaultValue=false)]
        public List<IJSONTypeInstance> SubTypes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONListTypeInstance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CollectionType: ").Append(CollectionType).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ValueAsObject: ").Append(ValueAsObject).Append("\n");
            sb.Append("  SubTypes: ").Append(SubTypes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONListTypeInstance);
        }

        /// <summary>
        /// Returns true if IJSONListTypeInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONListTypeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONListTypeInstance input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.CollectionType == input.CollectionType ||
                    (this.CollectionType != null &&
                    this.CollectionType.Equals(input.CollectionType))
                ) && base.Equals(input) && 
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) && base.Equals(input) && 
                (
                    this.ValueAsObject == input.ValueAsObject ||
                    this.ValueAsObject != null &&
                    this.ValueAsObject.SequenceEqual(input.ValueAsObject)
                ) && base.Equals(input) && 
                (
                    this.SubTypes == input.SubTypes ||
                    this.SubTypes != null &&
                    this.SubTypes.SequenceEqual(input.SubTypes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CollectionType != null)
                    hashCode = hashCode * 59 + this.CollectionType.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.ValueAsObject != null)
                    hashCode = hashCode * 59 + this.ValueAsObject.GetHashCode();
                if (this.SubTypes != null)
                    hashCode = hashCode * 59 + this.SubTypes.GetHashCode();
                return hashCode;
            }
        }

    }

}
