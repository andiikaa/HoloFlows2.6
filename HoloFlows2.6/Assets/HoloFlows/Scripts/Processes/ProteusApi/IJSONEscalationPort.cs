/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONEscalationPort
    /// </summary>
    [DataContract]
    public partial class IJSONEscalationPort : IJSONPort, IEquatable<IJSONEscalationPort>
    {

        protected override string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsonprocesssteps.JSONEscalationPort"; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONEscalationPort" /> class.
        /// </summary>
        /// <param name="EscalationTime">EscalationTime.</param>
        //public IJSONEscalationPort(long? EscalationTime = default(long?), string Name = default(string), string Id = default(string), string Type = default(string), List<IJSONTransition> OutTransitions = default(List<IJSONTransition>), string Description = default(string), bool? Optional = default(bool?), IJSONTransition InTransitions = default(IJSONTransition), PortTypeEnum? PortType = default(PortTypeEnum?)) : base(Name, Id, Type, OutTransitions, Description, Optional, InTransitions, PortType)
        //{
        //    this.EscalationTime = EscalationTime;
        //}

        /// <summary>
        /// Gets or Sets EscalationTime
        /// </summary>
        [DataMember(Name = "escalationTime", EmitDefaultValue = false)]
        public long? EscalationTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONEscalationPort {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EscalationTime: ").Append(EscalationTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONEscalationPort);
        }

        /// <summary>
        /// Returns true if IJSONEscalationPort instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONEscalationPort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONEscalationPort input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.EscalationTime == input.EscalationTime ||
                    (this.EscalationTime != null &&
                    this.EscalationTime.Equals(input.EscalationTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EscalationTime != null)
                    hashCode = hashCode * 59 + this.EscalationTime.GetHashCode();
                return hashCode;
            }
        }

    }

}
