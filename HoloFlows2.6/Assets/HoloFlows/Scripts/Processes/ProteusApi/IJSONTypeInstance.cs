/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONTypeInstance
    /// </summary>
    [DataContract]
    [KnownType(typeof(IJSONStringTypeInstance))]
    [KnownType(typeof(IJSONSetTypeInstance))]
    [KnownType(typeof(IJSONListTypeInstance))]
    [KnownType(typeof(IJSONIntegerTypeInstance))]
    [KnownType(typeof(IJSONComplexTypeInstance))]
    [KnownType(typeof(IJSONBooleanTypeInstance))]
    [KnownType(typeof(IJSONDoubleTypeInstance))]
    public partial class IJSONTypeInstance : IEquatable<IJSONTypeInstance>
    {

        //FIXME JSONTypeInstance is abstract in proteus and could not be instantiated
        protected virtual string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsontypeinstances.JSONStringTypeInstance"; }

        [JsonProperty("@class")]
        public string ClassInfo { get { return CreateJavaClassInfo(); } }


        /// <summary>
        /// Gets or Sets DataTypeInstanceType
        /// </summary>
        [DataMember(Name = "dataTypeInstanceType", EmitDefaultValue = false)]
        public DataTypeInstanceTypeEnum? DataTypeInstanceType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONTypeInstance" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="DataType">DataType.</param>
        /// <param name="ValueString">ValueString.</param>
        /// <param name="ValueAsObject">ValueAsObject.</param>
        /// <param name="TypeClass">TypeClass.</param>
        /// <param name="DataTypeInstanceType">DataTypeInstanceType.</param>
        /// <param name="ValueStringComplete">ValueStringComplete.</param>
        /// <param name="DataTypeID">DataTypeID.</param>
        /// <param name="InstanceID">InstanceID.</param>
        public IJSONTypeInstance(string Name = default(string), IJSONType DataType = default(IJSONType), string ValueString = default(string), Object ValueAsObject = default(Object), string TypeClass = default(string), DataTypeInstanceTypeEnum? DataTypeInstanceType = default(DataTypeInstanceTypeEnum?), string ValueStringComplete = default(string), string DataTypeID = default(string), string InstanceID = default(string))
        {
            this.Name = Name;
            this.DataType = DataType;
            this.ValueString = ValueString;
            this.ValueAsObject = ValueAsObject;
            this.TypeClass = TypeClass;
            this.DataTypeInstanceType = DataTypeInstanceType;
            this.ValueStringComplete = ValueStringComplete;
            this.DataTypeID = DataTypeID;
            this.InstanceID = InstanceID;
        }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public IJSONType DataType { get; set; }

        /// <summary>
        /// Gets or Sets ValueString
        /// </summary>
        [DataMember(Name = "valueString", EmitDefaultValue = false)]
        public string ValueString { get; set; }

        /// <summary>
        /// Gets or Sets ValueAsObject
        /// </summary>
        [DataMember(Name = "valueAsObject", EmitDefaultValue = false)]
        public Object ValueAsObject { get; set; }

        /// <summary>
        /// Gets or Sets TypeClass
        /// </summary>
        [DataMember(Name = "typeClass", EmitDefaultValue = false)]
        public string TypeClass { get; set; }


        /// <summary>
        /// Gets or Sets ValueStringComplete
        /// </summary>
        [DataMember(Name = "valueStringComplete", EmitDefaultValue = false)]
        public string ValueStringComplete { get; set; }

        /// <summary>
        /// Gets or Sets DataTypeID
        /// </summary>
        [DataMember(Name = "dataTypeID", EmitDefaultValue = false)]
        public string DataTypeID { get; set; }

        /// <summary>
        /// Gets or Sets InstanceID
        /// </summary>
        [DataMember(Name = "instanceID", EmitDefaultValue = false)]
        public string InstanceID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONTypeInstance {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  ValueString: ").Append(ValueString).Append("\n");
            sb.Append("  ValueAsObject: ").Append(ValueAsObject).Append("\n");
            sb.Append("  TypeClass: ").Append(TypeClass).Append("\n");
            sb.Append("  DataTypeInstanceType: ").Append(DataTypeInstanceType).Append("\n");
            sb.Append("  ValueStringComplete: ").Append(ValueStringComplete).Append("\n");
            sb.Append("  DataTypeID: ").Append(DataTypeID).Append("\n");
            sb.Append("  InstanceID: ").Append(InstanceID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONTypeInstance);
        }

        /// <summary>
        /// Returns true if IJSONTypeInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONTypeInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONTypeInstance input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                ) &&
                (
                    this.ValueString == input.ValueString ||
                    (this.ValueString != null &&
                    this.ValueString.Equals(input.ValueString))
                ) &&
                (
                    this.ValueAsObject == input.ValueAsObject ||
                    (this.ValueAsObject != null &&
                    this.ValueAsObject.Equals(input.ValueAsObject))
                ) &&
                (
                    this.TypeClass == input.TypeClass ||
                    (this.TypeClass != null &&
                    this.TypeClass.Equals(input.TypeClass))
                ) &&
                (
                    this.DataTypeInstanceType == input.DataTypeInstanceType ||
                    (this.DataTypeInstanceType != null &&
                    this.DataTypeInstanceType.Equals(input.DataTypeInstanceType))
                ) &&
                (
                    this.ValueStringComplete == input.ValueStringComplete ||
                    (this.ValueStringComplete != null &&
                    this.ValueStringComplete.Equals(input.ValueStringComplete))
                ) &&
                (
                    this.DataTypeID == input.DataTypeID ||
                    (this.DataTypeID != null &&
                    this.DataTypeID.Equals(input.DataTypeID))
                ) &&
                (
                    this.InstanceID == input.InstanceID ||
                    (this.InstanceID != null &&
                    this.InstanceID.Equals(input.InstanceID))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                if (this.ValueString != null)
                    hashCode = hashCode * 59 + this.ValueString.GetHashCode();
                if (this.ValueAsObject != null)
                    hashCode = hashCode * 59 + this.ValueAsObject.GetHashCode();
                if (this.TypeClass != null)
                    hashCode = hashCode * 59 + this.TypeClass.GetHashCode();
                if (this.DataTypeInstanceType != null)
                    hashCode = hashCode * 59 + this.DataTypeInstanceType.GetHashCode();
                if (this.ValueStringComplete != null)
                    hashCode = hashCode * 59 + this.ValueStringComplete.GetHashCode();
                if (this.DataTypeID != null)
                    hashCode = hashCode * 59 + this.DataTypeID.GetHashCode();
                if (this.InstanceID != null)
                    hashCode = hashCode * 59 + this.InstanceID.GetHashCode();
                return hashCode;
            }
        }

    }

}
