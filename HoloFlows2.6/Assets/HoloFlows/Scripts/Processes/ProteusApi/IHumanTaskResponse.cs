/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IHumanTaskResponse
    /// </summary>
    [DataContract]
    public partial class IHumanTaskResponse : IEquatable<IHumanTaskResponse>
    {
        /// <summary>
        /// Gets or Sets HumanTaskUseCase
        /// </summary>
        [DataMember(Name = "humanTaskUseCase", EmitDefaultValue = false)]
        public HumanTaskUseCaseEnum? HumanTaskUseCase { get; set; }


        /// <summary>
        /// Gets or Sets HumanTaskType
        /// </summary>
        [DataMember(Name = "humanTaskType", EmitDefaultValue = false)]
        public HumanTaskTypeEnum? HumanTaskType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IHumanTaskResponse" /> class.
        /// </summary>
        /// <param name="processInstanceId">processInstanceId.</param>
        /// <param name="sentForReservation">sentForReservation.</param>
        /// <param name="completed">completed.</param>
        /// <param name="requestId">requestId.</param>
        /// <param name="timestamp">timestamp.</param>
        /// <param name="messageId">messageId.</param>
        /// <param name="name">name.</param>
        /// <param name="humanTaskUseCase">humanTaskUseCase.</param>
        /// <param name="humanTaskType">humanTaskType.</param>
        /// <param name="description">description.</param>
        /// <param name="humanTaskInstanceId">humanTaskInstanceId.</param>
        /// <param name="endControlPorts">endControlPorts.</param>
        /// <param name="startDataPorts">startDataPorts.</param>
        /// <param name="endDataPorts">endDataPorts.</param>
        public IHumanTaskResponse(string processInstanceId = default(string), bool? sentForReservation = default(bool?), bool? completed = default(bool?), string requestId = default(string), long? timestamp = default(long?), string messageId = default(string), string name = default(string), HumanTaskUseCaseEnum? humanTaskUseCase = default(HumanTaskUseCaseEnum?), HumanTaskTypeEnum? humanTaskType = default(HumanTaskTypeEnum?), string description = default(string), string humanTaskInstanceId = default(string), Dictionary<string, IJSONPortInstance> endControlPorts = default(Dictionary<string, IJSONPortInstance>), Dictionary<string, IJSONDataPortInstance> startDataPorts = default(Dictionary<string, IJSONDataPortInstance>), Dictionary<string, IJSONDataPortInstance> endDataPorts = default(Dictionary<string, IJSONDataPortInstance>))
        {
            this.ProcessInstanceId = processInstanceId;
            this.SentForReservation = sentForReservation;
            this.Completed = completed;
            this.RequestId = requestId;
            this.Timestamp = timestamp;
            this.MessageId = messageId;
            this.Name = name;
            this.HumanTaskUseCase = humanTaskUseCase;
            this.HumanTaskType = humanTaskType;
            this.Description = description;
            this.HumanTaskInstanceId = humanTaskInstanceId;
            this.EndControlPorts = endControlPorts;
            this.StartDataPorts = startDataPorts;
            this.EndDataPorts = endDataPorts;
        }

        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets SentForReservation
        /// </summary>
        [DataMember(Name = "sentForReservation", EmitDefaultValue = false)]
        public bool? SentForReservation { get; set; }

        /// <summary>
        /// Gets or Sets Completed
        /// </summary>
        [DataMember(Name = "completed", EmitDefaultValue = false)]
        public bool? Completed { get; set; }

        /// <summary>
        /// Gets or Sets RequestId
        /// </summary>
        [DataMember(Name = "requestId", EmitDefaultValue = false)]
        public string RequestId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }



        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets HumanTaskInstanceId
        /// </summary>
        [DataMember(Name = "humanTaskInstanceId", EmitDefaultValue = false)]
        public string HumanTaskInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets EndControlPorts
        /// </summary>
        [DataMember(Name = "endControlPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONPortInstance> EndControlPorts { get; set; }

        /// <summary>
        /// Gets or Sets StartDataPorts
        /// </summary>
        [DataMember(Name = "startDataPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONDataPortInstance> StartDataPorts { get; set; }

        /// <summary>
        /// Gets or Sets EndDataPorts
        /// </summary>
        [DataMember(Name = "endDataPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONDataPortInstance> EndDataPorts { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IHumanTaskResponse {\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  SentForReservation: ").Append(SentForReservation).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  RequestId: ").Append(RequestId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  HumanTaskUseCase: ").Append(HumanTaskUseCase).Append("\n");
            sb.Append("  HumanTaskType: ").Append(HumanTaskType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HumanTaskInstanceId: ").Append(HumanTaskInstanceId).Append("\n");
            sb.Append("  EndControlPorts: ").Append(EndControlPorts).Append("\n");
            sb.Append("  StartDataPorts: ").Append(StartDataPorts).Append("\n");
            sb.Append("  EndDataPorts: ").Append(EndDataPorts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IHumanTaskResponse);
        }

        /// <summary>
        /// Returns true if IHumanTaskResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of IHumanTaskResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IHumanTaskResponse input)
        {
            if (input == null)
                return false;

            return
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) &&
                (
                    this.SentForReservation == input.SentForReservation ||
                    (this.SentForReservation != null &&
                    this.SentForReservation.Equals(input.SentForReservation))
                ) &&
                (
                    this.Completed == input.Completed ||
                    (this.Completed != null &&
                    this.Completed.Equals(input.Completed))
                ) &&
                (
                    this.RequestId == input.RequestId ||
                    (this.RequestId != null &&
                    this.RequestId.Equals(input.RequestId))
                ) &&
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) &&
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                ) &&
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) &&
                (
                    this.HumanTaskUseCase == input.HumanTaskUseCase ||
                    (this.HumanTaskUseCase != null &&
                    this.HumanTaskUseCase.Equals(input.HumanTaskUseCase))
                ) &&
                (
                    this.HumanTaskType == input.HumanTaskType ||
                    (this.HumanTaskType != null &&
                    this.HumanTaskType.Equals(input.HumanTaskType))
                ) &&
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) &&
                (
                    this.HumanTaskInstanceId == input.HumanTaskInstanceId ||
                    (this.HumanTaskInstanceId != null &&
                    this.HumanTaskInstanceId.Equals(input.HumanTaskInstanceId))
                ) &&
                (
                    this.EndControlPorts == input.EndControlPorts ||
                    this.EndControlPorts != null &&
                    this.EndControlPorts.SequenceEqual(input.EndControlPorts)
                ) &&
                (
                    this.StartDataPorts == input.StartDataPorts ||
                    this.StartDataPorts != null &&
                    this.StartDataPorts.SequenceEqual(input.StartDataPorts)
                ) &&
                (
                    this.EndDataPorts == input.EndDataPorts ||
                    this.EndDataPorts != null &&
                    this.EndDataPorts.SequenceEqual(input.EndDataPorts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.SentForReservation != null)
                    hashCode = hashCode * 59 + this.SentForReservation.GetHashCode();
                if (this.Completed != null)
                    hashCode = hashCode * 59 + this.Completed.GetHashCode();
                if (this.RequestId != null)
                    hashCode = hashCode * 59 + this.RequestId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.HumanTaskUseCase != null)
                    hashCode = hashCode * 59 + this.HumanTaskUseCase.GetHashCode();
                if (this.HumanTaskType != null)
                    hashCode = hashCode * 59 + this.HumanTaskType.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.HumanTaskInstanceId != null)
                    hashCode = hashCode * 59 + this.HumanTaskInstanceId.GetHashCode();
                if (this.EndControlPorts != null)
                    hashCode = hashCode * 59 + this.EndControlPorts.GetHashCode();
                if (this.StartDataPorts != null)
                    hashCode = hashCode * 59 + this.StartDataPorts.GetHashCode();
                if (this.EndDataPorts != null)
                    hashCode = hashCode * 59 + this.EndDataPorts.GetHashCode();
                return hashCode;
            }
        }

    }

}
