/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Text;
using System.Runtime.Serialization;
using Newtonsoft.Json;


namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IDataMappingUtil
    /// </summary>
    [DataContract]
    public partial class IDataMappingUtil :  IEquatable<IDataMappingUtil>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IDataMappingUtil" /> class.
        /// </summary>
        /// <param name="targetPortId">targetPortId.</param>
        /// <param name="sourceTypeId">sourceTypeId.</param>
        /// <param name="targetTypeId">targetTypeId.</param>
        /// <param name="sourcePortId">sourcePortId.</param>
        public IDataMappingUtil(string targetPortId = default(string), string sourceTypeId = default(string), string targetTypeId = default(string), string sourcePortId = default(string))
        {
            this.TargetPortId = targetPortId;
            this.SourceTypeId = sourceTypeId;
            this.TargetTypeId = targetTypeId;
            this.SourcePortId = sourcePortId;
        }
        
        /// <summary>
        /// Gets or Sets TargetPortId
        /// </summary>
        [DataMember(Name="targetPortId", EmitDefaultValue=false)]
        public string TargetPortId { get; set; }

        /// <summary>
        /// Gets or Sets SourceTypeId
        /// </summary>
        [DataMember(Name="sourceTypeId", EmitDefaultValue=false)]
        public string SourceTypeId { get; set; }

        /// <summary>
        /// Gets or Sets TargetTypeId
        /// </summary>
        [DataMember(Name="targetTypeId", EmitDefaultValue=false)]
        public string TargetTypeId { get; set; }

        /// <summary>
        /// Gets or Sets SourcePortId
        /// </summary>
        [DataMember(Name="sourcePortId", EmitDefaultValue=false)]
        public string SourcePortId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IDataMappingUtil {\n");
            sb.Append("  TargetPortId: ").Append(TargetPortId).Append("\n");
            sb.Append("  SourceTypeId: ").Append(SourceTypeId).Append("\n");
            sb.Append("  TargetTypeId: ").Append(TargetTypeId).Append("\n");
            sb.Append("  SourcePortId: ").Append(SourcePortId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IDataMappingUtil);
        }

        /// <summary>
        /// Returns true if IDataMappingUtil instances are equal
        /// </summary>
        /// <param name="input">Instance of IDataMappingUtil to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IDataMappingUtil input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TargetPortId == input.TargetPortId ||
                    (this.TargetPortId != null &&
                    this.TargetPortId.Equals(input.TargetPortId))
                ) && 
                (
                    this.SourceTypeId == input.SourceTypeId ||
                    (this.SourceTypeId != null &&
                    this.SourceTypeId.Equals(input.SourceTypeId))
                ) && 
                (
                    this.TargetTypeId == input.TargetTypeId ||
                    (this.TargetTypeId != null &&
                    this.TargetTypeId.Equals(input.TargetTypeId))
                ) && 
                (
                    this.SourcePortId == input.SourcePortId ||
                    (this.SourcePortId != null &&
                    this.SourcePortId.Equals(input.SourcePortId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TargetPortId != null)
                    hashCode = hashCode * 59 + this.TargetPortId.GetHashCode();
                if (this.SourceTypeId != null)
                    hashCode = hashCode * 59 + this.SourceTypeId.GetHashCode();
                if (this.TargetTypeId != null)
                    hashCode = hashCode * 59 + this.TargetTypeId.GetHashCode();
                if (this.SourcePortId != null)
                    hashCode = hashCode * 59 + this.SourcePortId.GetHashCode();
                return hashCode;
            }
        }
    }

}
