/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONDataPort
    /// </summary>
    [DataContract]
    public partial class IJSONDataPort : IJSONPort, IEquatable<IJSONDataPort>
    {

        protected override string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsonprocesssteps.JSONDataPort"; }


        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONDataPort" /> class.
        /// </summary>
        /// <param name="Value">Value.</param>
        /// <param name="DataType">DataType.</param>
        //public IJSONDataPort(string Value = default(string), IJSONType DataType = default(IJSONType), string Name = default(string), string Id = default(string), string Type = default(string), List<IJSONTransition> OutTransitions = default(List<IJSONTransition>), string Description = default(string), bool? Optional = default(bool?), IJSONTransition InTransitions = default(IJSONTransition), PortTypeEnum? PortType = default(PortTypeEnum?)) : base(Name, Id, Type, OutTransitions, Description, Optional, InTransitions, PortType)
        //{
        //    this.Value = Value;
        //    this.DataType = DataType;
        //}

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name = "value", EmitDefaultValue = false)]
        public string Value { get; set; }

        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name = "dataType", EmitDefaultValue = false)]
        public IJSONType DataType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONDataPort {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONDataPort);
        }

        /// <summary>
        /// Returns true if IJSONDataPort instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONDataPort to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONDataPort input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.Value == input.Value ||
                    (this.Value != null &&
                    this.Value.Equals(input.Value))
                ) && base.Equals(input) &&
                (
                    this.DataType == input.DataType ||
                    (this.DataType != null &&
                    this.DataType.Equals(input.DataType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.Value != null)
                    hashCode = hashCode * 59 + this.Value.GetHashCode();
                if (this.DataType != null)
                    hashCode = hashCode * 59 + this.DataType.GetHashCode();
                return hashCode;
            }
        }

    }

}
