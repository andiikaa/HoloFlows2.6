/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONEscalationPortInstance
    /// </summary>
    [DataContract]
    public partial class IJSONEscalationPortInstance : IJSONPortInstance, IEquatable<IJSONEscalationPortInstance>
    {
        protected override string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsonprocessstepinstances.JSONEscalationPortInstance"; }

        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONEscalationPortInstance" /> class.
        /// </summary>
        /// <param name="EscalationReason">EscalationReason.</param>
        //public IJSONEscalationPortInstance(string EscalationReason = default(string), string Name = default(string), string Type = default(string), List<IJSONTransitionInstance> OutTransitions = default(List<IJSONTransitionInstance>), bool? DoDeactivation = default(bool?), PortInstanceTypeEnum? PortInstanceType = default(PortInstanceTypeEnum?), int? InstanceNumber = default(int?), ExecutionStateEnum? ExecutionState = default(ExecutionStateEnum?), string InstanceId = default(string), IJSONTransitionInstance InTransitions = default(IJSONTransitionInstance), string TypeId = default(string), IJSONPort PortType = default(IJSONPort)) : base(Name, Type, OutTransitions, DoDeactivation, PortInstanceType, InstanceNumber, ExecutionState, InstanceId, InTransitions, TypeId, PortType)
        //{
        //    this.EscalationReason = EscalationReason;
        //}

        /// <summary>
        /// Gets or Sets EscalationReason
        /// </summary>
        [DataMember(Name = "escalationReason", EmitDefaultValue = false)]
        public string EscalationReason { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONEscalationPortInstance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  EscalationReason: ").Append(EscalationReason).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONEscalationPortInstance);
        }

        /// <summary>
        /// Returns true if IJSONEscalationPortInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONEscalationPortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONEscalationPortInstance input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.EscalationReason == input.EscalationReason ||
                    (this.EscalationReason != null &&
                    this.EscalationReason.Equals(input.EscalationReason))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.EscalationReason != null)
                    hashCode = hashCode * 59 + this.EscalationReason.GetHashCode();
                return hashCode;
            }
        }

    }

}
