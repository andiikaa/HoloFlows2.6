/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONDataPortInstance
    /// </summary>
    [DataContract]
    public partial class IJSONDataPortInstance : IJSONPortInstance, IEquatable<IJSONDataPortInstance>
    {

        protected override string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsonprocessstepinstances.JSONDataPortInstance"; }


        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONDataPortInstance" /> class.
        /// </summary>
        /// <param name="DataTypeInstance">DataTypeInstance.</param>
        /// <param name="PortType">PortType.</param>
        //public IJSONDataPortInstance(IJSONTypeInstance DataTypeInstance = default(IJSONTypeInstance), IJSONDataPort PortType = default(IJSONDataPort), string Name = default(string), string Type = default(string), List<IJSONTransitionInstance> OutTransitions = default(List<IJSONTransitionInstance>), bool? DoDeactivation = default(bool?), PortInstanceTypeEnum? PortInstanceType = default(PortInstanceTypeEnum?), int? InstanceNumber = default(int?), ExecutionStateEnum? ExecutionState = default(ExecutionStateEnum?), string InstanceId = default(string), IJSONTransitionInstance InTransitions = default(IJSONTransitionInstance), string TypeId = default(string)) : base(Name, Type, OutTransitions, DoDeactivation, PortInstanceType, InstanceNumber, ExecutionState, InstanceId, InTransitions, TypeId)
        //{
        //    this.DataTypeInstance = DataTypeInstance;
        //    this.PortType = PortType;
        //}

        /// <summary>
        /// Gets or Sets DataTypeInstance
        /// </summary>
        [DataMember(Name = "dataTypeInstance", EmitDefaultValue = false)]
        public IJSONTypeInstance DataTypeInstance { get; set; }

        /// <summary>
        /// Gets or Sets PortType
        /// </summary>
        [DataMember(Name = "portType", EmitDefaultValue = false)]
        new public IJSONDataPort PortType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONDataPortInstance {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  DataTypeInstance: ").Append(DataTypeInstance).Append("\n");
            sb.Append("  PortType: ").Append(PortType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONDataPortInstance);
        }

        /// <summary>
        /// Returns true if IJSONDataPortInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONDataPortInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONDataPortInstance input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.DataTypeInstance == input.DataTypeInstance ||
                    (this.DataTypeInstance != null &&
                    this.DataTypeInstance.Equals(input.DataTypeInstance))
                ) && base.Equals(input) &&
                (
                    this.PortType == input.PortType ||
                    (this.PortType != null &&
                    this.PortType.Equals(input.PortType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.DataTypeInstance != null)
                    hashCode = hashCode * 59 + this.DataTypeInstance.GetHashCode();
                if (this.PortType != null)
                    hashCode = hashCode * 59 + this.PortType.GetHashCode();
                return hashCode;
            }
        }

    }

}
