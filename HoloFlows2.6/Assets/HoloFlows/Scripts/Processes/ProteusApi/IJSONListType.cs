/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONListType
    /// </summary>
    [DataContract]
    public partial class IJSONListType : IJSONType, IEquatable<IJSONListType>
    {
        protected override string CreateJavaClassInfo() { return "eu.vicci.process.model.util.serialization.jsontypes.JSONListType"; }


        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONListType" /> class.
        /// </summary>
        /// <param name="CollectionType">CollectionType.</param>
        //public IJSONListType(IJSONType CollectionType = default(IJSONType), string Name = default(string), string Id = default(string), DataTypeTypeEnum? DataTypeType = default(DataTypeTypeEnum?), string TypeClass = default(string)) : base(Name, Id, DataTypeType, TypeClass)
        //{
        //    this.CollectionType = CollectionType;
        //}

        /// <summary>
        /// Gets or Sets CollectionType
        /// </summary>
        [DataMember(Name = "collectionType", EmitDefaultValue = false)]
        public IJSONType CollectionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONListType {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  CollectionType: ").Append(CollectionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONListType);
        }

        /// <summary>
        /// Returns true if IJSONListType instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONListType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONListType input)
        {
            if (input == null)
                return false;

            return base.Equals(input) &&
                (
                    this.CollectionType == input.CollectionType ||
                    (this.CollectionType != null &&
                    this.CollectionType.Equals(input.CollectionType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.CollectionType != null)
                    hashCode = hashCode * 59 + this.CollectionType.GetHashCode();
                return hashCode;
            }
        }

    }

}
