/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IStateChangeMessage
    /// </summary>
    [DataContract]
    public partial class IStateChangeMessage : IEquatable<IStateChangeMessage>
    {

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name = "state", EmitDefaultValue = false)]
        public StateEnum? State { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IStateChangeMessage" /> class.
        /// </summary>
        /// <param name="State">State.</param>
        /// <param name="PeerId">PeerId.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="ProcessName">ProcessName.</param>
        /// <param name="ProcessId">ProcessId.</param>
        /// <param name="InstanceId">InstanceId.</param>
        /// <param name="OriginalProcessInstanceId">OriginalProcessInstanceId.</param>
        /// <param name="ProcessModelId">ProcessModelId.</param>
        /// <param name="EndControlPorts">EndControlPorts.</param>
        /// <param name="StartDataPorts">StartDataPorts.</param>
        /// <param name="StartControlPorts">StartControlPorts.</param>
        /// <param name="EndDataPorts">EndDataPorts.</param>
        /// <param name="ModelId">ModelId.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="MessageId">MessageId.</param>
        public IStateChangeMessage(StateEnum? State = default(StateEnum?), string PeerId = default(string), string ProcessInstanceId = default(string), string ProcessName = default(string), string ProcessId = default(string), string InstanceId = default(string), string OriginalProcessInstanceId = default(string), string ProcessModelId = default(string), Dictionary<string, IJSONPortInstance> EndControlPorts = default(Dictionary<string, IJSONPortInstance>), Dictionary<string, IJSONDataPortInstance> StartDataPorts = default(Dictionary<string, IJSONDataPortInstance>), Dictionary<string, IJSONPortInstance> StartControlPorts = default(Dictionary<string, IJSONPortInstance>), Dictionary<string, IJSONDataPortInstance> EndDataPorts = default(Dictionary<string, IJSONDataPortInstance>), string ModelId = default(string), long? Timestamp = default(long?), string MessageId = default(string))
        {
            this.State = State;
            this.PeerId = PeerId;
            this.ProcessInstanceId = ProcessInstanceId;
            this.ProcessName = ProcessName;
            this.ProcessId = ProcessId;
            this.InstanceId = InstanceId;
            this.OriginalProcessInstanceId = OriginalProcessInstanceId;
            this.ProcessModelId = ProcessModelId;
            this.EndControlPorts = EndControlPorts;
            this.StartDataPorts = StartDataPorts;
            this.StartControlPorts = StartControlPorts;
            this.EndDataPorts = EndDataPorts;
            this.ModelId = ModelId;
            this.Timestamp = Timestamp;
            this.MessageId = MessageId;
        }


        /// <summary>
        /// Gets or Sets PeerId
        /// </summary>
        [DataMember(Name = "peerId", EmitDefaultValue = false)]
        public string PeerId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name = "processInstanceId", EmitDefaultValue = false)]
        public string ProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name = "processName", EmitDefaultValue = false)]
        public string ProcessName { get; set; }

        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name = "processId", EmitDefaultValue = false)]
        public string ProcessId { get; set; }

        /// <summary>
        /// Gets or Sets InstanceId
        /// </summary>
        [DataMember(Name = "instanceId", EmitDefaultValue = false)]
        public string InstanceId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalProcessInstanceId
        /// </summary>
        [DataMember(Name = "originalProcessInstanceId", EmitDefaultValue = false)]
        public string OriginalProcessInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessModelId
        /// </summary>
        [DataMember(Name = "processModelId", EmitDefaultValue = false)]
        public string ProcessModelId { get; set; }

        /// <summary>
        /// Gets or Sets EndControlPorts
        /// </summary>
        [DataMember(Name = "endControlPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONPortInstance> EndControlPorts { get; set; }

        /// <summary>
        /// Gets or Sets StartDataPorts
        /// </summary>
        [DataMember(Name = "startDataPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONDataPortInstance> StartDataPorts { get; set; }

        /// <summary>
        /// Gets or Sets StartControlPorts
        /// </summary>
        [DataMember(Name = "startControlPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONPortInstance> StartControlPorts { get; set; }

        /// <summary>
        /// Gets or Sets EndDataPorts
        /// </summary>
        [DataMember(Name = "endDataPorts", EmitDefaultValue = false)]
        public Dictionary<string, IJSONDataPortInstance> EndDataPorts { get; set; }

        /// <summary>
        /// Gets or Sets ModelId
        /// </summary>
        [DataMember(Name = "modelId", EmitDefaultValue = false)]
        public string ModelId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name = "timestamp", EmitDefaultValue = false)]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>
        [DataMember(Name = "messageId", EmitDefaultValue = false)]
        public string MessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IStateChangeMessage {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  PeerId: ").Append(PeerId).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  InstanceId: ").Append(InstanceId).Append("\n");
            sb.Append("  OriginalProcessInstanceId: ").Append(OriginalProcessInstanceId).Append("\n");
            sb.Append("  ProcessModelId: ").Append(ProcessModelId).Append("\n");
            sb.Append("  EndControlPorts: ").Append(EndControlPorts).Append("\n");
            sb.Append("  StartDataPorts: ").Append(StartDataPorts).Append("\n");
            sb.Append("  StartControlPorts: ").Append(StartControlPorts).Append("\n");
            sb.Append("  EndDataPorts: ").Append(EndDataPorts).Append("\n");
            sb.Append("  ModelId: ").Append(ModelId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IStateChangeMessage);
        }

        /// <summary>
        /// Returns true if IStateChangeMessage instances are equal
        /// </summary>
        /// <param name="input">Instance of IStateChangeMessage to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IStateChangeMessage input)
        {
            if (input == null)
                return false;

            return
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) &&
                (
                    this.PeerId == input.PeerId ||
                    (this.PeerId != null &&
                    this.PeerId.Equals(input.PeerId))
                ) &&
                (
                    this.ProcessInstanceId == input.ProcessInstanceId ||
                    (this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(input.ProcessInstanceId))
                ) &&
                (
                    this.ProcessName == input.ProcessName ||
                    (this.ProcessName != null &&
                    this.ProcessName.Equals(input.ProcessName))
                ) &&
                (
                    this.ProcessId == input.ProcessId ||
                    (this.ProcessId != null &&
                    this.ProcessId.Equals(input.ProcessId))
                ) &&
                (
                    this.InstanceId == input.InstanceId ||
                    (this.InstanceId != null &&
                    this.InstanceId.Equals(input.InstanceId))
                ) &&
                (
                    this.OriginalProcessInstanceId == input.OriginalProcessInstanceId ||
                    (this.OriginalProcessInstanceId != null &&
                    this.OriginalProcessInstanceId.Equals(input.OriginalProcessInstanceId))
                ) &&
                (
                    this.ProcessModelId == input.ProcessModelId ||
                    (this.ProcessModelId != null &&
                    this.ProcessModelId.Equals(input.ProcessModelId))
                ) &&
                (
                    this.EndControlPorts == input.EndControlPorts ||
                    this.EndControlPorts != null &&
                    this.EndControlPorts.SequenceEqual(input.EndControlPorts)
                ) &&
                (
                    this.StartDataPorts == input.StartDataPorts ||
                    this.StartDataPorts != null &&
                    this.StartDataPorts.SequenceEqual(input.StartDataPorts)
                ) &&
                (
                    this.StartControlPorts == input.StartControlPorts ||
                    this.StartControlPorts != null &&
                    this.StartControlPorts.SequenceEqual(input.StartControlPorts)
                ) &&
                (
                    this.EndDataPorts == input.EndDataPorts ||
                    this.EndDataPorts != null &&
                    this.EndDataPorts.SequenceEqual(input.EndDataPorts)
                ) &&
                (
                    this.ModelId == input.ModelId ||
                    (this.ModelId != null &&
                    this.ModelId.Equals(input.ModelId))
                ) &&
                (
                    this.Timestamp == input.Timestamp ||
                    (this.Timestamp != null &&
                    this.Timestamp.Equals(input.Timestamp))
                ) &&
                (
                    this.MessageId == input.MessageId ||
                    (this.MessageId != null &&
                    this.MessageId.Equals(input.MessageId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                if (this.PeerId != null)
                    hashCode = hashCode * 59 + this.PeerId.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessName != null)
                    hashCode = hashCode * 59 + this.ProcessName.GetHashCode();
                if (this.ProcessId != null)
                    hashCode = hashCode * 59 + this.ProcessId.GetHashCode();
                if (this.InstanceId != null)
                    hashCode = hashCode * 59 + this.InstanceId.GetHashCode();
                if (this.OriginalProcessInstanceId != null)
                    hashCode = hashCode * 59 + this.OriginalProcessInstanceId.GetHashCode();
                if (this.ProcessModelId != null)
                    hashCode = hashCode * 59 + this.ProcessModelId.GetHashCode();
                if (this.EndControlPorts != null)
                    hashCode = hashCode * 59 + this.EndControlPorts.GetHashCode();
                if (this.StartDataPorts != null)
                    hashCode = hashCode * 59 + this.StartDataPorts.GetHashCode();
                if (this.StartControlPorts != null)
                    hashCode = hashCode * 59 + this.StartControlPorts.GetHashCode();
                if (this.EndDataPorts != null)
                    hashCode = hashCode * 59 + this.EndDataPorts.GetHashCode();
                if (this.ModelId != null)
                    hashCode = hashCode * 59 + this.ModelId.GetHashCode();
                if (this.Timestamp != null)
                    hashCode = hashCode * 59 + this.Timestamp.GetHashCode();
                if (this.MessageId != null)
                    hashCode = hashCode * 59 + this.MessageId.GetHashCode();
                return hashCode;
            }
        }

    }

}
