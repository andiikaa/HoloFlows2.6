/* 
 * PROtEUS REST API
 *
 * Accessing the PROtEUS runtime via REST
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;

namespace Processes.Proteus.Rest.Model
{
    /// <summary>
    /// IJSONType
    /// </summary>
    [DataContract]
    [KnownType(typeof(IJSONComplexType))]
    [KnownType(typeof(IJSONStringType))]
    [KnownType(typeof(IJSONBooleanType))]
    [KnownType(typeof(IJSONDoubleType))]
    [KnownType(typeof(IJSONSetType))]
    [KnownType(typeof(IJSONIntegerType))]
    [KnownType(typeof(IJSONListType))]
    public partial class IJSONType :  IEquatable<IJSONType>
    {
        /// <summary>
        /// Defines DataTypeType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum DataTypeTypeEnum
        {
            
            /// <summary>
            /// Enum StringType for value: StringType
            /// </summary>
            [EnumMember(Value = "StringType")]
            StringType = 1,
            
            /// <summary>
            /// Enum BooleanType for value: BooleanType
            /// </summary>
            [EnumMember(Value = "BooleanType")]
            BooleanType = 2,
            
            /// <summary>
            /// Enum ComplexType for value: ComplexType
            /// </summary>
            [EnumMember(Value = "ComplexType")]
            ComplexType = 3,
            
            /// <summary>
            /// Enum IntegerType for value: IntegerType
            /// </summary>
            [EnumMember(Value = "IntegerType")]
            IntegerType = 4,
            
            /// <summary>
            /// Enum DoubleType for value: DoubleType
            /// </summary>
            [EnumMember(Value = "DoubleType")]
            DoubleType = 5,
            
            /// <summary>
            /// Enum ListType for value: ListType
            /// </summary>
            [EnumMember(Value = "ListType")]
            ListType = 6,
            
            /// <summary>
            /// Enum SetType for value: SetType
            /// </summary>
            [EnumMember(Value = "SetType")]
            SetType = 7
        }

        /// <summary>
        /// Gets or Sets DataTypeType
        /// </summary>
        [DataMember(Name="dataTypeType", EmitDefaultValue=false)]
        public DataTypeTypeEnum? DataTypeType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="IJSONType" /> class.
        /// </summary>
        /// <param name="Name">Name.</param>
        /// <param name="Id">Id.</param>
        /// <param name="DataTypeType">DataTypeType.</param>
        /// <param name="TypeClass">TypeClass.</param>
        public IJSONType(string Name = default(string), string Id = default(string), DataTypeTypeEnum? DataTypeType = default(DataTypeTypeEnum?), string TypeClass = default(string))
        {
            this.Name = Name;
            this.Id = Id;
            this.DataTypeType = DataTypeType;
            this.TypeClass = TypeClass;
        }
        
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }


        /// <summary>
        /// Gets or Sets TypeClass
        /// </summary>
        [DataMember(Name="typeClass", EmitDefaultValue=false)]
        public string TypeClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IJSONType {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  DataTypeType: ").Append(DataTypeType).Append("\n");
            sb.Append("  TypeClass: ").Append(TypeClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IJSONType);
        }

        /// <summary>
        /// Returns true if IJSONType instances are equal
        /// </summary>
        /// <param name="input">Instance of IJSONType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IJSONType input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.DataTypeType == input.DataTypeType ||
                    (this.DataTypeType != null &&
                    this.DataTypeType.Equals(input.DataTypeType))
                ) && 
                (
                    this.TypeClass == input.TypeClass ||
                    (this.TypeClass != null &&
                    this.TypeClass.Equals(input.TypeClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.DataTypeType != null)
                    hashCode = hashCode * 59 + this.DataTypeType.GetHashCode();
                if (this.TypeClass != null)
                    hashCode = hashCode * 59 + this.TypeClass.GetHashCode();
                return hashCode;
            }
        }

    }

}
